# coding: utf-8

"""
    Household savings

    This is the API for a household savings model. You can provide details about a household's energy use, and receive information about the household's potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.emissions import Emissions
from openapi_client.models.opex import Opex
from openapi_client.models.recommendation import Recommendation
from openapi_client.models.upfront_cost import UpfrontCost

class Savings(BaseModel):
    """
    Savings
    """
    emissions: Optional[Emissions] = None
    opex: Optional[Opex] = None
    upfront_cost: Optional[UpfrontCost] = Field(default=None, alias="upfrontCost")
    recommendation: Optional[Recommendation] = None
    __properties = ["emissions", "opex", "upfrontCost", "recommendation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Savings:
        """Create an instance of Savings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of emissions
        if self.emissions:
            _dict['emissions'] = self.emissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opex
        if self.opex:
            _dict['opex'] = self.opex.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upfront_cost
        if self.upfront_cost:
            _dict['upfrontCost'] = self.upfront_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recommendation
        if self.recommendation:
            _dict['recommendation'] = self.recommendation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Savings:
        """Create an instance of Savings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Savings.parse_obj(obj)

        _obj = Savings.parse_obj({
            "emissions": Emissions.from_dict(obj.get("emissions")) if obj.get("emissions") is not None else None,
            "opex": Opex.from_dict(obj.get("opex")) if obj.get("opex") is not None else None,
            "upfront_cost": UpfrontCost.from_dict(obj.get("upfrontCost")) if obj.get("upfrontCost") is not None else None,
            "recommendation": Recommendation.from_dict(obj.get("recommendation")) if obj.get("recommendation") is not None else None
        })
        return _obj


