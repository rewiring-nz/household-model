# coding: utf-8

"""
    Household savings

    This is the API for a household savings model. You can provide details about a household's energy use, and receive information about the household's potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.

    The version of the OpenAPI document: 0.0.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt

class Solar(BaseModel):
    """
    The household's solar panel system  # noqa: E501
    """
    has_solar: StrictBool = Field(default=..., alias="hasSolar", description="Whether the household has solar")
    size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The size of the solar panel system in kW. Should be null if hasSolar is False and installSolar is False.")
    install_solar: Optional[StrictBool] = Field(default=None, alias="installSolar", description="Whether the household wants to install solar. Should be null if hasSolar is True.")
    __properties = ["hasSolar", "size", "installSolar"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Solar:
        """Create an instance of Solar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Solar:
        """Create an instance of Solar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Solar.parse_obj(obj)

        _obj = Solar.parse_obj({
            "has_solar": obj.get("hasSolar"),
            "size": obj.get("size"),
            "install_solar": obj.get("installSolar")
        })
        return _obj


