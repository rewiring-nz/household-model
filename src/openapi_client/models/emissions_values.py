# coding: utf-8

"""
    Household savings

    This is the API for a household savings model. You can provide details about a household's energy use, and receive information about the household's potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.

    The version of the OpenAPI document: 0.0.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class EmissionsValues(BaseModel):
    """
    EmissionsValues
    """
    before: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The household's emissions per week before electrification in kg CO2e to 2 dp.")
    after: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The household's emissions per week after electrification in kg CO2e to 2 dp.")
    difference: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The difference in emissions before & after electrification, in kg CO2e to 2 dp.")
    __properties = ["before", "after", "difference"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EmissionsValues:
        """Create an instance of EmissionsValues from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EmissionsValues:
        """Create an instance of EmissionsValues from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EmissionsValues.parse_obj(obj)

        _obj = EmissionsValues.parse_obj({
            "before": obj.get("before"),
            "after": obj.get("after"),
            "difference": obj.get("difference")
        })
        return _obj


