# coding: utf-8

"""
    Household savings

    This is the API for a household savings model. You can provide details about a household's energy use, and receive information about the household's potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.

    The version of the OpenAPI document: 0.0.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class UpfrontCost(BaseModel):
    """
    The estimated total NZD cost of electrifying the household  # noqa: E501
    """
    solar: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The estimated cost of installing solar in NZD")
    battery: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The estimated cost of installing a battery in NZD")
    cooktop: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The estimated cost of switching to cooktop in NZD")
    water_heating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="waterHeating", description="The estimated cost of switching to waterHeating in NZD")
    space_heating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="spaceHeating", description="The estimated cost of switching to spaceHeating in NZD")
    __properties = ["solar", "battery", "cooktop", "waterHeating", "spaceHeating"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpfrontCost:
        """Create an instance of UpfrontCost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpfrontCost:
        """Create an instance of UpfrontCost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpfrontCost.parse_obj(obj)

        _obj = UpfrontCost.parse_obj({
            "solar": obj.get("solar"),
            "battery": obj.get("battery"),
            "cooktop": obj.get("cooktop"),
            "water_heating": obj.get("waterHeating"),
            "space_heating": obj.get("spaceHeating")
        })
        return _obj


